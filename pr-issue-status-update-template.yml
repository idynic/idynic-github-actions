name: PR Issue Status Update

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, closed]

permissions:
  issues: write
  pull-requests: read

jobs:
  update-linked-issue:
    runs-on: ubuntu-latest
    steps:
      # Extract issue number from PR title, body, or branch name
      - name: Extract issue reference
        id: extract
        shell: bash
        run: |
          # First check title for common issue references
          ISSUE_NUMBER=$(echo "${{ github.event.pull_request.title }}" | grep -o -E '([Ff]ix(es|ed)?|[Cc]los(e|es|ed)|[Rr]esolv(e|es|ed)|[Ii]ssue|#)[[:space:]]*#?[0-9]+' | grep -o '[0-9]\+' | head -1)
          
          # If not found in title, extract from beginning of body (safer)
          if [ -z "$ISSUE_NUMBER" ]; then
            # Write PR body to file with single quotes to avoid shell interpretation issues
            echo '${{ github.event.pull_request.body }}' | head -n 10 > pr_body.txt
            ISSUE_NUMBER=$(grep -o -E '([Ff]ix(es|ed)?|[Cc]los(e|es|ed)|[Rr]esolv(e|es|ed)|[Ii]ssue|#)[[:space:]]*#?[0-9]+' pr_body.txt | grep -o '[0-9]\+' | head -1)
          fi
          
          # If not found, try to extract from branch name (issue-123-description or issue-123)
          if [ -z "$ISSUE_NUMBER" ]; then
            BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
            if [[ "$BRANCH_NAME" =~ ^issue-([0-9]+) ]]; then
              ISSUE_NUMBER="${BASH_REMATCH[1]}"
            fi
          fi
          
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "Found issue number: #$ISSUE_NUMBER"
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "No issue number found in PR title, body, or branch name"
          fi
          
          # For all events, log extraction results for diagnostics
          echo "Event type: ${{ github.event.action }}"
          echo "Issue extraction result: ${ISSUE_NUMBER:-none}"

      # Following GitHub best practices for issue status updates:
      # 1. Opened or Ready for Review â†’ Waiting for Review
      # 2. Merged â†’ Done
      # 3. Synchronize â†’ Only update if PR title contains [update-status]
      
      - name: Update to Waiting for Review (PR opened or ready)
        if: steps.extract.outputs.issue_number && (github.event.action == 'opened' || github.event.action == 'ready_for_review')
        uses: idynic/idynic-github-actions/update-issue-status@main
        with:
          issue-number: ${{ steps.extract.outputs.issue_number }}
          status: 'Waiting for Review'
          token: ${{ secrets.PROJECT_TOKEN }}
          organization: ${{ github.repository_owner }}

      - name: Update to Waiting for Review (PR synchronized - opt-in)
        if: steps.extract.outputs.issue_number && github.event.action == 'synchronize' && contains(github.event.pull_request.title, '[update-status]')
        uses: idynic/idynic-github-actions/update-issue-status@main
        with:
          issue-number: ${{ steps.extract.outputs.issue_number }}
          status: 'Waiting for Review'
          token: ${{ secrets.PROJECT_TOKEN }}
          organization: ${{ github.repository_owner }}

      - name: Update to Done when merged
        if: steps.extract.outputs.issue_number && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: idynic/idynic-github-actions/update-issue-status@main
        with:
          issue-number: ${{ steps.extract.outputs.issue_number }}
          status: 'Done'
          token: ${{ secrets.PROJECT_TOKEN }}
          organization: ${{ github.repository_owner }}

      # GitHub best practices: Add minimal, informative comments about status transitions
      
      - name: Add PR opened comment
        if: steps.extract.outputs.issue_number && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract.outputs.issue_number }},
              body: `ðŸ“‹ Pull Request #${{ github.event.pull_request.number }} opened for this issue: ${{ github.event.pull_request.html_url }}\n\nâœ… Issue status updated to: **Waiting for Review**`
            });

      - name: Add review ready comment
        if: steps.extract.outputs.issue_number && github.event.action == 'ready_for_review'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract.outputs.issue_number }},
              body: `ðŸ“‹ Pull Request #${{ github.event.pull_request.number }} is ready for review: ${{ github.event.pull_request.html_url }}\n\nâœ… Issue status updated to: **Waiting for Review**`
            });
            
      - name: Add status update comment (opt-in only)
        if: steps.extract.outputs.issue_number && github.event.action == 'synchronize' && contains(github.event.pull_request.title, '[update-status]')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract.outputs.issue_number }},
              body: `ðŸ”„ PR #${{ github.event.pull_request.number }} updated with new commits: ${{ github.event.pull_request.html_url }}\n\nâœ… Issue status updated to: **Waiting for Review**`
            });

      - name: Add merged comment
        if: steps.extract.outputs.issue_number && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract.outputs.issue_number }},
              body: `ðŸŽ‰ Pull Request #${{ github.event.pull_request.number }} has been merged!\n\nâœ… Issue status updated to: **Done**`
            });
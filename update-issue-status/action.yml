name: 'Update Issue Status'
description: 'Update GitHub issue status in project board using GraphQL API'
inputs:
  issue-number:
    description: 'The issue number to update'
    required: true
  status:
    description: 'The new status to set'
    required: true
  token:
    description: 'GitHub token with project permissions'
    required: true
  organization:
    description: 'Organization name'
    default: 'idynic'
    required: false
  project-name:
    description: 'Project name to search for (defaults to "{repo} project")'
    required: false
  project-number:
    description: 'Project number in the organization (deprecated - use project-name)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating inputs..."
        
        if [ -z "${{ inputs.issue-number }}" ]; then
          echo "‚ùå ERROR: issue-number is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.status }}" ]; then
          echo "‚ùå ERROR: status is required"
          exit 1
        fi
        
        if [ -z "${{ inputs.token }}" ]; then
          echo "‚ùå ERROR: token is required"
          exit 1
        fi
        
        echo "‚úÖ Input validation passed"
        echo "Issue: #${{ inputs.issue-number }}"
        echo "Status: ${{ inputs.status }}"
        echo "Organization: ${{ inputs.organization }}"
        
        # Get repository name from GITHUB_REPOSITORY
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        
        # Determine project name
        if [ -n "${{ inputs.project-name }}" ]; then
          PROJECT_NAME="${{ inputs.project-name }}"
        else
          # Default to "{repo} project"
          PROJECT_NAME="$REPO_NAME project"
        fi
        echo "Project Name: $PROJECT_NAME"

    - name: Update status
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        echo "üìù Updating issue #${{ inputs.issue-number }} status to '${{ inputs.status }}'..."
        
        # Get repository owner and name
        REPO_OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        
        # Determine project name for search
        if [ -n "${{ inputs.project-name }}" ]; then
          PROJECT_NAME="${{ inputs.project-name }}"
        else
          # Default to "{repo} project"
          PROJECT_NAME="$REPO_NAME project"
        fi
        
        # GraphQL query to find project by name
        echo "üîç Searching for project: $PROJECT_NAME"
        PROJECTS_QUERY=$(cat <<EOF
        {
          organization(login: "${{ inputs.organization }}") {
            projectsV2(first: 50, query: "$PROJECT_NAME") {
              nodes {
                id
                title
                field(name: "Status") {
                  ... on ProjectV2SingleSelectField {
                    id
                    options {
                      id
                      name
                    }
                  }
                }
              }
            }
          }
        }
        EOF
        )
        
        REQUEST_BODY=$(jq -n --arg query "$PROJECTS_QUERY" '{ query: $query }')
        
        PROJECTS_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -X POST \
          -d "$REQUEST_BODY" \
          https://api.github.com/graphql)
        
        # Check for errors in the response
        if echo "$PROJECTS_RESPONSE" | jq -e '.errors' > /dev/null; then
          echo "‚ùå ERROR: GraphQL query failed"
          echo "$PROJECTS_RESPONSE" | jq -r '.errors'
          exit 1
        fi
        
        # Extract field ID and option ID
        PROJECT_DATA=$(echo $PROJECTS_RESPONSE | jq -r ".data.organization.projectsV2.nodes[] | select(.title == \"$PROJECT_NAME\")")
        
        if [ -z "$PROJECT_DATA" ]; then
          echo "‚ùå ERROR: Project '$PROJECT_NAME' not found in organization '${{ inputs.organization }}'"
          exit 1
        fi
        
        PROJECT_ID=$(echo $PROJECT_DATA | jq -r '.id')
        FIELD_ID=$(echo $PROJECT_DATA | jq -r '.field.id')
        OPTION_ID=$(echo $PROJECT_DATA | jq -r ".field.options[] | select(.name == \"${{ inputs.status }}\") | .id")
        
        if [ -z "$OPTION_ID" ]; then
          echo "‚ùå ERROR: Status '${{ inputs.status }}' not found in project"
          echo "Available statuses:"
          echo $PROJECT_DATA | jq -r '.field.options[].name'
          exit 1
        fi
        
        # Get the issue's project item ID
        ISSUE_QUERY=$(cat <<EOF
        {
          repository(owner: "$REPO_OWNER", name: "$REPO_NAME") {
            issue(number: ${{ inputs.issue-number }}) {
              projectItems(first: 10) {
                nodes {
                  id
                  project {
                    id
                  }
                }
              }
            }
          }
        }
        EOF
        )
        
        ISSUE_REQUEST_BODY=$(jq -n --arg query "$ISSUE_QUERY" '{ query: $query }')
        ISSUE_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -X POST \
          -d "$ISSUE_REQUEST_BODY" \
          https://api.github.com/graphql)
        
        # Check for errors
        if echo "$ISSUE_RESPONSE" | jq -e '.errors' > /dev/null; then
          echo "‚ùå ERROR: Failed to fetch issue project items"
          echo "$ISSUE_RESPONSE" | jq -r '.errors'
          exit 1
        fi
        
        ITEM_ID=$(echo $ISSUE_RESPONSE | jq -r ".data.repository.issue.projectItems.nodes[] | select(.project.id == \"$PROJECT_ID\") | .id")
        
        if [ -z "$ITEM_ID" ]; then
          echo "‚ùå ERROR: Issue #${{ inputs.issue-number }} not found in project '$PROJECT_NAME'"
          exit 1
        fi
        
        # Update the status
        UPDATE_MUTATION=$(cat <<EOF
        mutation {
          updateProjectV2ItemFieldValue(input: {
            projectId: "$PROJECT_ID"
            itemId: "$ITEM_ID"
            fieldId: "$FIELD_ID"
            value: {
              singleSelectOptionId: "$OPTION_ID"
            }
          }) {
            projectV2Item {
              id
            }
          }
        }
        EOF
        )
        
        UPDATE_REQUEST_BODY=$(jq -n --arg query "$UPDATE_MUTATION" '{ query: $query }')
        
        UPDATE_RESPONSE=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -X POST \
          -d "$UPDATE_REQUEST_BODY" \
          https://api.github.com/graphql)
        
        # Check for errors
        if echo "$UPDATE_RESPONSE" | jq -e '.errors' > /dev/null; then
          echo "‚ùå ERROR: Failed to update status"
          echo "$UPDATE_RESPONSE" | jq -r '.errors'
          exit 1
        fi
        
        echo "‚úÖ Successfully updated issue #${{ inputs.issue-number }} to status: ${{ inputs.status }}"
        
        # Add a comment to the issue (optional, only if gh is available)
        if command -v gh &> /dev/null; then
          gh issue comment ${{ inputs.issue-number }} \
            --body "‚úÖ Status automatically updated to: **${{ inputs.status }}**" || true
        fi
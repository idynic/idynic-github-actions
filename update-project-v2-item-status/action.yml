name: Update Project V2 Item Status
description: Sets the status of an item (linked to an issue or PR) on a GitHub Project V2 board.

inputs:
  github_token:
    description: A Personal Access Token (PAT) with `repo`, `read:org`, and `project` scopes. **GITHUB_TOKEN will NOT work for organization projects.**
    required: true
  owner_login:
    description: The login of the organization or user that owns the GitHub Project (e.g., 'idynic').
    required: true
  project_number:
    description: The number of the Project V2 (e.g., 5 if the URL is /orgs/owner/projects/5).
    required: true
    type: integer
  content_node_id:
    description: The GraphQL Node ID of the content (Issue or Pull Request) whose status is to be updated on the project board.
    required: true
  target_status_value:
    description: The exact string value of the desired status (e.g., 'In Progress', 'Done'). This MUST match an existing option in your project's status field.
    required: true
  status_field_name:
    description: The name of the custom 'Status' field in your Project V2. This is case-sensitive.
    required: false
    default: Status

outputs:
  project_item_id:
    description: The GraphQL Node ID of the project item that was created or updated.

runs:
  using: composite
  steps:
    - name: Install jq utility
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update -qq && sudo apt-get install -y jq
        else
          echo "jq already installed."
        fi

    - name: Update Project V2 Item Status
      id: update_status_script
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        set -euo pipefail
        
        echo "ACTION START: $(date)"
        echo "GitHub Runner OS: $(uname -a)"
        
        # Get Project ID
        echo "Fetching Project ID for project #${{ inputs.project_number }} owned by ${{ inputs.owner_login }}..."
        
        # First get all projects to confirm we can access them
        echo "Listing available projects for ${{ inputs.owner_login }}..."
        PROJECTS_RESPONSE=$(gh api graphql -f query='
          query($login: String!) { 
            organization(login: $login) { 
              projectsV2(first:10) { 
                nodes { 
                  title 
                  number 
                  id 
                } 
              } 
            } 
          }' -F login="${{ inputs.owner_login }}" 2>&1)
        
        echo "Projects: $PROJECTS_RESPONSE"
        
        PROJECT_ID=$(echo "$PROJECTS_RESPONSE" | jq -r '.data.organization.projectsV2.nodes[] | select(.number == ${{ inputs.project_number }}) | .id')
        
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
          echo "Error: Could not find project #${{ inputs.project_number }} for owner '${{ inputs.owner_login }}'."
          exit 1
        fi
        
        echo "Found Project ID: $PROJECT_ID"
        
        # Get Status field ID and target option ID
        echo "Fetching project fields and options..."
        FIELDS_RESPONSE=$(gh api graphql -f query='
          query($projectId: ID!) { 
            node(id: $projectId) { 
              ... on ProjectV2 { 
                fields(first: 20) { 
                  nodes { 
                    ... on ProjectV2Field { 
                      id 
                      name 
                      dataType 
                    } 
                    ... on ProjectV2SingleSelectField { 
                      id 
                      name 
                      options { 
                        id 
                        name 
                      } 
                    } 
                  } 
                } 
              } 
            } 
          }' -F projectId="$PROJECT_ID" 2>&1)
        
        echo "Fields: $FIELDS_RESPONSE"
        
        STATUS_FIELD_ID=$(echo "$FIELDS_RESPONSE" | jq -r --arg fieldName "${{ inputs.status_field_name }}" '.data.node.fields.nodes[] | select(.name == $fieldName) | .id')
        TARGET_OPTION_ID=$(echo "$FIELDS_RESPONSE" | jq -r --arg fieldName "${{ inputs.status_field_name }}" --arg optionName "${{ inputs.target_status_value }}" '.data.node.fields.nodes[] | select(.name == $fieldName) | .options[] | select(.name == $optionName) | .id')
        
        if [ -z "$STATUS_FIELD_ID" ] || [ "$STATUS_FIELD_ID" = "null" ]; then
          echo "Error: Status field '${{ inputs.status_field_name }}' not found in project."
          exit 1
        fi
        
        if [ -z "$TARGET_OPTION_ID" ] || [ "$TARGET_OPTION_ID" = "null" ]; then
          echo "Error: Status option '${{ inputs.target_status_value }}' not found in field '${{ inputs.status_field_name }}'."
          exit 1
        fi
        
        echo "Found Status Field ID: $STATUS_FIELD_ID"
        echo "Found Target Option ID: $TARGET_OPTION_ID"
        
        # Add item to project (will re-add if already exists, which is fine)
        echo "Adding content to project..."
        
        ADD_ITEM_RESPONSE=$(gh api graphql -f query='
          mutation($projectId: ID!, $contentId: ID!) { 
            addProjectV2ItemById(input: {
              projectId: $projectId, 
              contentId: $contentId
            }) { 
              item { 
                id 
              } 
            } 
          }' -F projectId="$PROJECT_ID" -F contentId="${{ inputs.content_node_id }}" 2>&1)
        
        # Check for errors (but continue if the error is just that the item already exists)
        if echo "$ADD_ITEM_RESPONSE" | grep -q "already added"; then
          echo "Issue is already on the project board, looking it up..."
          
          # Find the project item using project items query
          PROJECT_ITEMS_RESPONSE=$(gh api graphql -f query='
            query($projectId: ID!, $first: Int = 100) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: $first) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          id
                        }
                        ... on PullRequest {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -F projectId="$PROJECT_ID" 2>&1)
          
          echo "Project items: $PROJECT_ITEMS_RESPONSE"
          
          PROJECT_ITEM_ID=$(echo "$PROJECT_ITEMS_RESPONSE" | jq -r --arg contentId "${{ inputs.content_node_id }}" '.data.node.items.nodes[] | select(.content.id == $contentId) | .id')
          
          if [ -z "$PROJECT_ITEM_ID" ] || [ "$PROJECT_ITEM_ID" = "null" ]; then
            echo "Error: Could not find item on project board."
            exit 1
          fi
        else
          # Extract project item ID from add operation
          PROJECT_ITEM_ID=$(echo "$ADD_ITEM_RESPONSE" | jq -r '.data.addProjectV2ItemById.item.id')
          
          if [ -z "$PROJECT_ITEM_ID" ] || [ "$PROJECT_ITEM_ID" = "null" ]; then
            echo "Error: Failed to add item to project. Response: $ADD_ITEM_RESPONSE"
            exit 1
          fi
        fi
        
        echo "Project Item ID: $PROJECT_ITEM_ID"
        
        # Update status
        echo "Updating item status to '${{ inputs.target_status_value }}'..."
        
        UPDATE_RESPONSE=$(gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) { 
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId, 
              itemId: $itemId, 
              fieldId: $fieldId, 
              value: {
                singleSelectOptionId: $optionId
              }
            }) { 
              projectV2Item { 
                id 
              } 
            } 
          }' -F projectId="$PROJECT_ID" -F itemId="$PROJECT_ITEM_ID" -F fieldId="$STATUS_FIELD_ID" -F optionId="$TARGET_OPTION_ID" 2>&1)
        
        echo "Update response: $UPDATE_RESPONSE"
        
        UPDATED_ITEM_ID=$(echo "$UPDATE_RESPONSE" | jq -r '.data.updateProjectV2ItemFieldValue.projectV2Item.id')
        
        if [ -z "$UPDATED_ITEM_ID" ] || [ "$UPDATED_ITEM_ID" = "null" ]; then
          echo "Error: Failed to update item status."
          exit 1
        fi
        
        echo "Successfully updated item to status '${{ inputs.target_status_value }}'."
        echo "project_item_id=$PROJECT_ITEM_ID" >> "$GITHUB_OUTPUT"